Routput <- matrix(0, newsize, pp)
Ioutput <- matrix(0, newsize, pp)
output <- matrix(0, newsize, pp)
dim(Routput) <- c(pp * newsize, 1)
dim(Ioutput) <- c(pp * newsize, 1)
dim(input) <- c(newsize, 1)
z <- .C("Sgabor", as.double(input), Rtmp = as.double(Routput),
Itmp = as.double(Ioutput), as.integer(nvoice), as.double(freqstep),
as.integer(newsize), as.double(scale), PACKAGE="Rwave")
Routput <- z$Rtmp
Ioutput <- z$Itmp
dim(Routput) <- c(newsize, pp)
dim(Ioutput) <- c(newsize, pp)
i <- sqrt(as.complex(-1))
output <- Routput[1:isize, ] + Ioutput[1:isize, ] * i
if (plot) {
image(1:newsize, seq(0, nvoice*freqstep/2, length=nvoice),
Mod(output), xlab = "Time", ylab = "Frequency")
title("Gabor Transform Modulus")
}
output
}
cgtchirp <- mycgt(chirp, 50, .005, 25)
tmp <- cleanph(cgtchirp, .01)
source('~/Gabor.R')
source('~/Gabor.R')
source('~/Gabor.R')
gabor1()
source('~/Gabor.R')
gabor2()
gabor2()
highpass <- bwfilter(dta, freq=8,drift=FALSE)
plot(highpass)
vgt(10,10,10,TRUE)
in<-sin(1:200)
in(1:100)<-sin(1:200)
n(1:100)<-sin(1:200)
sin(1:200)
vgt(sin(1:100),10,10,TRUE)
vgt(sin(1:100),10,2,TRUE)
vgt((1:100),10,2,TRUE)
vgt((1:100),10,2,1)
vgt((1:100),10,2)
vgt(sin(1:100),10,2)
vgt(sin(1:100),10,2,0)
vgt(sin(1:100),10,2,1)
vgt(sin(10),10,2,1)
vgt(sin(10),10,2,0)
cgt(sin(1:100),2,.5,2,1)
cgt(constrOptim(1:100),2,.5,2,1)
cgt(cos(1:100),2,.5,2,1)
cgt(cos(1:100),2,.5,2,1)
cgt(cos(1:100)*2,2,.5,2,1)
cgt(cos(1:100)*2,2,.5,3,1)
//
%
%%
meshgrid
mode(sz,2)
mode(3,2)
mod(3,2)
LakeHuron
install.packages('grt')
gaborPatch
data(subjdemo_2d)
#fit a 2d suboptimal model
fit.2dl <- glc(response ~ x + y, data=subjdemo_2d,
category=subjdemo_2d$category, zlimit=7)
extractAIC(fit.2dl)
library(grt)
install.packages('rgl')
library(grt)
library(rgl)
install.packages('rgl')
library(rgl)
library(grt)
ceil
source('~/gabor_fn.R')
source('~/gabor_fn.R')
t <- 1:9
x <- c(0, 2, 0, 4, 4, 4, 0, 2, 0)
x - detrend(x, 'constant')
x - detrend(x, 'linear')
y <- detrend(x, 'linear', 5)
## Not run:
plot(t, x, col="blue")
lines(t, x - y, col="red")
grid()## End(Not run)
install.packages('detrend')
install.packages('detrendeR')
t <- 1:9
x <- c(0, 2, 0, 4, 4, 4, 0, 2, 0)
x - detrend(x, 'constant')
x - detrend(x, 'linear')
y <- detrend(x, 'linear', 5)
## Not run:
plot(t, x, col="blue")
lines(t, x - y, col="red")
grid()## End(Not run)
install.packages('pracma')
library('pracma')
t <- 1:9
x <- c(0, 2, 0, 4, 4, 4, 0, 2, 0)
x - detrend(x, 'constant')
x - detrend(x, 'linear')
y <- detrend(x, 'linear', 5)
## Not run:
plot(t, x, col="blue")
lines(t, x - y, col="red")
grid()## End(Not run)
x
detrend()
detrend(sin(1:100))
plot(detrend(sin(1:100)))
plot(1:100,detrend(sin(1:100)))
plot(1:100,detrend(sin(1:100),'constant',5))
plot(1:100,detrend(sin(1:100),'constant'))
plot(1:100,detrend(sin(1:100),'linear'))
detrend(sin(1:10))
sd(detrend(sin(1:10)))
data(co021, package="dplR")
years<-as.integer(rownames(co021))
co021.subset<-(subset(co021, subset=years>=1900 & years<=1950))
co021.subset<-co021.subset[,-c(28,30,31)] ## to remove the following series "645232","646107" and "646118"
EPS.value(co021.subset, stc=c(0,8,0))
library(mFilter)
data("unemp")
unemp
lu <-log(unemp)
plot(lu)
lu
lu[1]
lu[0]
lu[1]
lu[2]-lu[1]
lu[2:2000]-lu[3:1999]
lu[3:2000]-lu[2:1999]
lu[3:2000]-lu[2:1999]
sd(lu)
mean(lu)
kpss.test
install.packages('tseries')
source('~/hpfilter.R')
sd=1
mu=0
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
plot(x,tser,type='l')
x
tser
x
x=seq(-5:5)
sd=1
mu=0
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
plot(x,tser,type='l')
x
help(seq)
seq(-5,5,.01)
x=seq(-5,5,.01)
sd=1
mu=0
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
plot(x,tser,type='l')
mu=2
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
sd=3
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
x
sd=5
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
sd=2
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
mu=-3
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
sd=10
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
sd=.5
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
sd=.99
lines(x,tser,col='3')
tser=exp((-(x-mu)^2)/2*sd*sd)*(1/sqrt(2*sd*sd*pi))
lines(x,tser,col='3')
plot(dnorm(x,0,sd=1))
line(x,2,sd))
line(dnorm(x,2,sd))
lines(dnorm(x,2,sd))
lines(dnorm(x,2,sd/4))
lines(dnorm(x,3,2*sd))
lines(dnorm(x,4,2*sd))
mean(x)
lines(x,tser,col='3')
plot(dnorm(x,0,sd=1))
plot(x,dnorm(x,0,sd=1))
plot(x,dnorm(x,0,8))
plot(x,dnorm(x,0,sd=1))
lines(x,dnorm(x,0,8))
lines(x,dnorm(x,0,6))
lines(x,dnorm(x,0,5))
lines(x,dnorm(x,0,2))
lines(x,dnorm(x,2,1))
lines(x,dnorm(x,2,20))
lines(x,dnorm(x,2,6))
lines(x,dnorm(x,2,.99))
lines(x,dnorm(x,2,.75))
lines(x,dnorm(x,2,.5))
lines(x,dnorm(x,2,.2))
lines(x,dnorm(x,2,.1))
plot(x,dnorm(x,0,sd=1))
plot(x,dnorm(x,0,sd=2))
plot(x,dnorm(x,0,sd=4))
plot(x,dnorm(x,0,sd=7))
plot(x,dnorm(x,0,sd=10))
lines(x,dnorm(x,2,.1))
lines(x,dnorm(x,2,1))
lines(x,dnorm(x,2,2))
lines(x,dnorm(x,2,8))
plot(x,dnorm(x,0,2))
lines(x,dnorm(x,2,8))
lines(x,dnorm(x,2,5))
lines(x,dnorm(x,2,5))
lines(x,dnorm(x,2,3))
lines(x,dnorm(x,0,3))
plot(x,dnorm(x,0,1))
lines(x,dnorm(x,1,1),col='2')
lines(x,dnorm(x,2,1),col='3')
lines(x,dnorm(x,3,1),col='4')
lines(x,dnorm(x,4,1),col='5')
lines(x,dnorm(x,-1,1),col='6')
lines(x,dnorm(x,-2,1),col='7')
lines(x,dnorm(x,-3,1),col='8')
lines(x,dnorm(x,0,.5))
plot(x)
y=sin(x)
plot(y)
plot(x,y)
x=seq(-100,100,.25)
y=sin(x)
plot(x,y)
plot(x,y,line='t')
plot(x,y,line='l')
plot(x,y,type='l')
clear
plot(x,y,type='l')
x=seq(-100,100,.5)
plot(x,sin(x),line='t')
plot(x,sin(x),type='l')
plot(x,sin(x),type='l')
x=seq(-100,100,2.5)
plot(x,sin(x),type='l')
plot(x,cos(x),type='l')
x=seq(-100,100,1)
plot(x,cos(x),type='l')
plot(x,sin(x),type='l')
y=sin(x)
x=seq(-10,10,1)
y=sin(x)
plot(x,sin(x),type='l')
x=seq(-10,10,.1)
y=sin(x)
plot(x,sin(x),type='l')
fft(y)
fft(fft(y),inverse=TRUE)
fft(fft(y),inverse=TRUE)/1*2*pi
lines(x,fft(fft(y),inverse=TRUE)/1*2*pi)
plot(x,sin(x),type='l')
lines(x,abs(fft(fft(y),inverse=TRUE))/1*2*pi)
plot(x,abs(fft(fft(y),inverse=TRUE))/1*2*pi)
plot(x,abs(fft(fft(y),inverse=TRUE))/1*2*pi,type='l')
plot(x,abs(fft(fft(y),inverse=TRUE))/1/2*pi,type='l')
plot(x,abs(fft(fft(y),inverse=TRUE))/2*pi,type='l')
lines(x,y,col=4)
plot(x,y)
plot(x,y,type='l')
fft(fft(y),inverse=TRUE)
fft(fft(y),inverse=TRUE)/2*pi
y
fft(fft(y),inverse=TRUE)/2*pi
y
fft(fft(y),inverse=TRUE)/2*pi
fft(fft(y),inverse=TRUE)/length(y)
lines(fft(fft(y),inverse=TRUE)/length(y),type='l'
,col=4)
xf=fft(fft(y),inverse=TRUE)/length(y)
y-xf
abs(y-xf)
sum(abs(y-xf))
plot(x,xf,col=5)
plot(x,abs(xf),col=5)
plot(x,xf,col=5)
plot(x,re(xf),col=5)
plot(x,Re(xf),col=5)
plot(x,y)
lines(x,xf)
lines(x,xf,col=3)
plot(x,y)
plot(x,y,type='l')
help(fft)
gauss(10)
guass(10)
help(guass)
??guass
gaussian(10)
??gaussian
gausswin(10)
4.67*6
4.5*6
x=seq(5:5,.1)
x
x=seq(5:5,5)
x
repeat(10)
Michalak, M T (Travis) <MICHALM@nationwide.com>
rep(1:4, 2)
rep(4, 2)
rep(4, 200)
x=rep(4, 200)
plot(x)
fft(fft(x),inverse=TRUE)
fft(fft(x),inverse=TRUE)/length(x)
fft(fft(x),inverse=TRUE)
fft(x)
abs(fft(x))
plot(abs(fft(x)))
plot((fft(x)))
plot(abs(fft(x)))
plot(re(fft(x)))
plot(Re(fft(x)))
plot(Im(fft(x)))
plot(Im(fft(x)),type='l')
plot(Re(fft(x)),type='l')
plot(abs(fft(x)),type='l')
plot(abs(fft(x)),ype='l')
abs(fft(x))
fx=abs(fft(x))
fx
abs(fx)
plot(abs(fx))
17*42
17*42/533
x=-5:4
x=-5:5
plot(x)
x=-5:5:.1
x=-5:.15:.1
x=-5:.1
plot(x)
x=-5:.1:5
seq(-5,5,.1)
x=seq(-5,5,.1)
plot(x)
y=sin(x)
plot(y)
length(y)
ly=length(y)
gaussian(ly)
ly
guasswin(10)
help gaussian()
sd(x)
exp(-sd^2)
sd
clear all
rm(ls())
rm(list())
ls()
rm
help rm
help(rm)
rm(list)
list()
ls()
remove(ls())
rm(ls())
s.d=sd(x)
s.d^d
s.d^2
s.d
exp(-s.d^2)
exp(-s.d^2)*x
plot(exp(-s.d^2)*x)
sd(x)
sd(x)^2
exp(-sd(x)^2)
exp(-sd(x)^2*x)
plot(exp(-sd(x)^2*x))
plot(x,exp(-sd(x)^2*x))
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
require(graphics)
gauss=density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
require(graphics)
gauss=density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))
require(graphics)
gauss=density(c(-20, rep(0,98), 20))
plot(guass)
plot(gauss)
plot(gauss,xlim=c(-4,4))
plot(gauss,xlim=c(-3,3))
size(gauss)
length(guass)
length(gauss)
gauss
obj(gauss)
class(gauss)
attribute(gauss)
object(gauss)
help(class)
y=sin(-5:-5:.1)
y
y=sin(-5:5:.1)
y=sin(-5:.1:.5)
seq(-5,5,.1)
seq(-5,4.9,.1)
sin(seq(-5,4.9,.1))
y=sin(seq(-5,4.9,.1))
plot(y)
lines(fft(y))
plot(fft(y))
plot(fft(y))
x=seq(-5,4.9,.1)
plot(x,fft(y))
plot(x,fft(y),line='l')
plot(x,fft(y),type='l')
plot(x,abs(fft(y)),type='l')
x=sin(2*pi*50)
plot(x)
x=sin(2*pi*50*)
t=seq(-10:9.9:.1)
plot(t)
source('~/sANDp500.R')
abc()
abc()
abc()
source('~/asset.paths.R')
runPlot()
1:10:1
1:10:1
1:1:10
x<-1:1:10;
x
sin(x)
plot(sin(x))
x<-1:.1:100;
plot(sin(x))
help plot
help('plot)
;
''
')'
help('plot')
plot(sin,-pi,2*pi)
plot(sin,-pi,pi)
plot(sin,-pi,.5*pi)
plot(sin,-pi,3*pi)
plot(sin,-2*pi,3*pi)
plot(sin,-2*pi,3*pi)
plot(sin,-3*pi,3*pi)
plot(tan,-3*pi,3*pi)
plot(cos,-3*pi,3*pi)
plot(fft(cos),-3*pi,3*pi)
fft
fft(x)
y=fft(x)
plot(y,-3*pi,3*pi)
plot(y)
plot(y,x)
y
x
x<-sin(x)
y=fft(x);
plot(y)
plot(abs(y))
plot(abs(y),'.')
plot(abs(y),x)
plot(abs(y))
x
plot(x)
plot(x,-pi,pi)
x
plot(x)
xs<-seq(-2*pi,2*pi,pi/100)
xs
plot(xs)
sin(xs)
plot(sin(xs))
plot(xs,sin(xs))
plot(sin(xs))
plot(xs,sin(xs))
plot(xs,sin(3*xs))
plot(xs,sin(10*xs))
plot(xs,sin(6*xs))
plot(xs,sin(3*xs))
plot(xs,sin(6*xs),type='l')
plot(xs,sin(10*xs),type='l')
plot(xs,sin(3*xs))
plot(xs,sin(3*xs),type='l')
cos(-10)
cos(10)
sin(-10)
sin(10)
source('~/Documents/2016/Personal/Praba/MATH599/program/llt.R')
llt()
warnings()
source('~/Documents/2016/RD/NeuralNetwork/Data/Workspace/FundNN.R')
fundNN()
